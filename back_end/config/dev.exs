use Mix.Config

http_port = "PORT" |> System.get_env() |> String.to_integer()
db_pool_size = "DB_POOL_SIZE" |> System.get_env() |> String.to_integer()
db_port = "DB_PORT" |> System.get_env() |> String.to_integer()
db_ssl = "DB_SSL" |> System.get_env() |> Acd.Utility.to_bool()

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :acd, AcdWeb.Endpoint,
  secret_key_base: System.get_env("SECRET_KEY_BASE"),
  http: [port: http_port],
  url: [host: "localhost"],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/webpack/bin/webpack.js",
      "--mode",
      "development",
      "--watch-stdin",
      cd: Path.expand("../assets", __DIR__)
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :acd, AcdWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
      ~r{priv/gettext/.*(po)$},
      ~r{lib/acd_web/views/.*(ex)$},
      ~r{lib/acd_web/templates/.*(eex)$}
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"
# config :logger, level: :info

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 100

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Configure your database
config :acd, Acd.Repo,
  username: System.get_env("DB_USER"),
  password: System.get_env("DB_PW"),
  database: System.get_env("DB_NAME"),
  hostname: System.get_env("DB_HOST"),
  pool_size: db_pool_size,
  port: db_port,
  ssl: db_ssl

# Verbose debug output for WS debugging
config :acd, :janus, ws_debug: [debug: [:trace]]

config :acd, :ice_api, url: System.get_env("ICE_API_URL"), creds: System.get_env("ICE_API_CREDS")
